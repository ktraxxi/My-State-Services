@page "/authorization"
@inject IJSRuntime js
@inject NavigationManager nm

<div class="on_border">
    <div class="border">

        <div class="title_reg">
            <div><h1>Вход в личный кабинет</h1></div>
            <div><span>Пожалуйста, введите номер телефона и пароль</span></div>
        </div>

        <div class="autho_field_list">
            <li><input @bind-value="PhoneNumber" class="field" type="text" maxlength="20" placeholder="Номер телефона / Логин" required></li>
            <li><input @bind-value="Password" class="field" type="text" maxlength="20" placeholder="Пароль" required></li>
        </div>

        <div class="reg_button">
            <div><a @onclick="AuthorizeAndStorage" href="/authorization">Вход в личный кабинет</a></div>
        </div>

        @if (DeleteDialogOpen)
        {
            <ModalDialog Title="Ошибка авторизации"
                         Text="Вы неправильно ввели логин или пароль. Повторите попытку"
                         ButtonText="Ок"
                         OnClose="@OnDeleteDialogClose">
            </ModalDialog>
        }

    </div>
</div>


@code {
    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose()
    {
        DeleteDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog(bool accepted)
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    public string PhoneNumber { get; set; }
    public string Password { get; set; }
    public User MyUser { get; set; }
    LocalStorageService storage;

    public void AuthorizeAndStorage()
    {
        Authorize();
        if (MyUser != null)
        {
            LocalStorageSave();
            User.IsAuthorizedTrue();
            nm.NavigateTo("/account");
        }
        else
        {
            OpenDeleteDialog(true);
        }
    }

    public void Authorize()
    {
        MyUser = User.Authorization(PhoneNumber, Password, MyUser);
    }

    protected override void OnInitialized()
    {
        storage = new LocalStorageService(js);
    }

    public async void LocalStorageSave()
    {
        await storage.SetStringAsync("key-photoname", MyUser.PhotoName);
        await storage.SetStringAsync("key-name", MyUser.FirstName);
        await storage.SetStringAsync("key-surname", MyUser.Surname);
        await storage.SetStringAsync("key-patronymic", MyUser.Patronymic);
        await storage.SetStringAsync("key-birth", MyUser.BirthDate);
        await storage.SetStringAsync("key-email", MyUser.Email);
        await storage.SetStringAsync("key-login", MyUser.LoginPhoneNumber);
        await storage.SetStringAsync("key-password", MyUser.Password);
        await storage.SetStringAsync("key-passport", MyUser.PassportNumber);
        await storage.SetStringAsync("key-polis", MyUser.MedicalPolicyNumber);
        await storage.SetStringAsync("key-inn", MyUser.TaxIdenticalNumber);
        await storage.SetStringAsync("key-snils", MyUser.InsuranceNumber);
        await storage.SetStringAsync("key-city", MyUser.City);
        await storage.SetStringAsync("key-street", MyUser.Street);
        await storage.SetStringAsync("key-building", MyUser.BuildingNumber);
        await storage.SetStringAsync("key-appartment", MyUser.AppartmentNumber);
    }
}

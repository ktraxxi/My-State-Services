@inject IJSRuntime js
@using MongoDB.Bson;
@using MongoDB.Bson.Serialization.Attributes;
@using MongoDB.Driver;
@using Microsoft.AspNetCore.Components.Forms;
@using Project_State_Services.Models;
@inject IUploadPhoto uploadPhoto

<div class="account">

    <div class="table">
        <table class="account_table">
            <tbody>
                <tr> <td>Фамилия</td> <td>@Surname</td> <td><input @bind="Surname" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Имя</td> <td>@Name</td> <td><input @bind="Name" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Отчество</td> <td>@Patronymic</td> <td><input @bind="Patronymic" class="field_account2" type="text" maxlength="20"></td> </tr>

                <tr> <td>Дата рождения</td> <td>@BirthDate</td> <td><RadzenDatePicker @bind-Value=@BirthDate_DateTime DateFormat="d" DateRender="DateRender" class="w-150" />@*<input @bind="BirthDate" class="field_account2" type="text" maxlength="20" placeholder="ДД.ММ.ГГГГ">*@</td> </tr>
                <tr> <td>Электронная почта</td> <td>@Email</td> <td><input @bind="Email" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Номер телефона</td> <td>@Login</td> <td><input @bind="Login" class="field_account2" type="text" maxlength="20"></td> </tr>

                <tr> <td>Пароль</td> <td>@Password</td> <td><input @bind="Password" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Паспорт</td> <td>@Passport</td> <td><input @bind="Passport" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Полис</td> <td>@MedicalPolicyNumber</td> <td><input @bind="MedicalPolicyNumber" class="field_account2" type="text" maxlength="20"></td> </tr>

                <tr> <td>ИНН</td> <td>@TaxIdenticalNumber</td> <td><input @bind="TaxIdenticalNumber" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>СНИЛС</td> <td>@InsuranceNumber</td> <td><input @bind="InsuranceNumber" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Город</td> <td>@City</td> <td><input @bind="City" class="field_account2" type="text" maxlength="20"></td> </tr>

                <tr> <td>Улица</td> <td>@Street</td> <td><input @bind="Street" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Дом</td> <td>@Building</td> <td><input @bind="Building" class="field_account2" type="text" maxlength="20"></td> </tr>
                <tr> <td>Квартира</td> <td>@Appartment</td> <td><input @bind="Appartment" class="field_account2" type="text" maxlength="20"></td> </tr>
            </tbody>
        </table>
    </div>

    <div class="photo_and_btns">
        <div class="avatar">
            <img src=@PhotoName />
        </div>

        <div class="upload_avatar">
            <div class="reg_button">
                <div><InputFile Id='foo' style="display:none;" OnChange="HandleFileSelected" /></div>
                <div class="label_button"><label for='foo' style="cursor: pointer"><span>Загрузить фото</span></label></div>
                
            </div>
        </div>

        <div class="appointment">
            <div class="reg_button">
                <div><a href="/datepicker">Мои записи</a></div>
            </div>
        </div>
    </div>

    @if (DeleteDialogOpen)
    {
        <ModalDialog Title="Are you sure?"
                     Text="Do you want to delete this entry?"
                     OnClose="@OnDeleteDialogClose">
        </ModalDialog>
    }

    <div class="edit_btn">
        <div class="reg_button">
            <div><a @onclick="Editor" href="#">Редактировать данные</a></div>
        </div>
    </div>

    <div class="exit_btn">
        <div class="reg_button">
            <div><a @onclick="ClearData" href="/">Выход</a></div>
        </div>
    </div>

</div>

@code {
    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog()
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    IFileListEntry file;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();

        if (file != null)
        {
            await uploadPhoto.Upload(file);
            PhotoName = $"user_avatars/{file.Name}";
        }
    }

    [BsonIgnoreIfNull] public string PhotoName { get; set; }
    [BsonIgnoreIfNull] public string Name { get; set; }
    [BsonIgnoreIfNull] public string Surname { get; set; }
    [BsonIgnoreIfNull] public string Patronymic { get; set; }
    [BsonIgnoreIfNull] public string BirthDate { get; set; }
    [BsonIgnoreIfNull] public string Email { get; set; }
    [BsonIgnoreIfNull] public string Login { get; set; }
    [BsonIgnoreIfNull] public string Password { get; set; }
    [BsonIgnoreIfNull] public string Passport { get; set; }
    [BsonIgnoreIfNull] public string MedicalPolicyNumber { get; set; }
    [BsonIgnoreIfNull] public string TaxIdenticalNumber { get; set; }
    [BsonIgnoreIfNull] public string InsuranceNumber { get; set; }
    [BsonIgnoreIfNull] public string City { get; set; }
    [BsonIgnoreIfNull] public string Street { get; set; }
    [BsonIgnoreIfNull] public string Building { get; set; }
    [BsonIgnoreIfNull] public string Appartment { get; set; }




    public static DateTime? BirthDate_DateTime = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };


    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        if (args.Date > DateTime.Today.Date)
        {
            args.Disabled = true;
        }
    }












    public async void LocalStorageLoadName()
    {
        PhotoName = await storage.GetStringAsync("key-photoname");
        Name = await storage.GetStringAsync("key-name");
        Surname = await storage.GetStringAsync("key-surname");
        Patronymic = await storage.GetStringAsync("key-patronymic");
        BirthDate = await storage.GetStringAsync("key-birth");
        Email = await storage.GetStringAsync("key-email");
        Login = await storage.GetStringAsync("key-login");
        Password = await storage.GetStringAsync("key-password");
        Passport = await storage.GetStringAsync("key-passport");
        MedicalPolicyNumber = await storage.GetStringAsync("key-polis");
        TaxIdenticalNumber = await storage.GetStringAsync("key-inn");
        InsuranceNumber = await storage.GetStringAsync("key-snils");
        City = await storage.GetStringAsync("key-city");
        Street = await storage.GetStringAsync("key-street");
        Building = await storage.GetStringAsync("key-building");
        Appartment = await storage.GetStringAsync("key-appartment");
        StateHasChanged();
    }

    LocalStorageService storage;

    protected override void OnInitialized()
    {
        storage = new LocalStorageService(js);
        LocalStorageLoadName();
    }

    public async void ClearData()
    {
        await storage.RemoveAsync("key-photoname");
        await storage.RemoveAsync("key-name");
        await storage.RemoveAsync("key-surname");
        await storage.RemoveAsync("key-patronymic");
        await storage.RemoveAsync("key-birth");
        await storage.RemoveAsync("key-email");
        await storage.RemoveAsync("key-login");
        await storage.RemoveAsync("key-password");
        await storage.RemoveAsync("key-passport");
        await storage.RemoveAsync("key-polis");
        await storage.RemoveAsync("key-inn");
        await storage.RemoveAsync("key-snils");
        await storage.RemoveAsync("key-city");
        await storage.RemoveAsync("key-street");
        await storage.RemoveAsync("key-building");
        await storage.RemoveAsync("key-appartment");

        User.IsAuthorizedFalse();
        StateHasChanged();
    }

    public void Editor()
    {
        var client = new MongoClient("mongodb://localhost");
        var db = client.GetDatabase("State_Services_Users");
        var collection = db.GetCollection<User>("Users");


        collection.UpdateOne(x => x.LoginPhoneNumber == Login, Builders<User>.Update.Set(x => x.PhotoName, PhotoName)
            .Set(x => x.FirstName, Name).Set(x => x.Surname, Surname).Set(x => x.Patronymic, Patronymic)
            .Set(x => x.BirthDate, BirthDate_DateTime.ToString()).Set(x => x.Email, Email).Set(x => x.LoginPhoneNumber, Login)
            .Set(x => x.Password, Password).Set(x => x.PassportNumber, Passport)
            .Set(x => x.MedicalPolicyNumber, MedicalPolicyNumber).Set(x => x.TaxIdenticalNumber, TaxIdenticalNumber)
            .Set(x => x.InsuranceNumber, InsuranceNumber).Set(x => x.City, City).Set(x => x.Street, Street)
            .Set(x => x.BuildingNumber, Building).Set(x => x.AppartmentNumber, Appartment));
    }




}
